#!/usr/bin/env bash
export HUSKY_SKIP_HOOKS=1

# Ensure Confluent Cloud tools are in your PATH
export PATH=$HOME/.ccloud/bin:$PATH
export PATH=$HOME/.mongo/bin:$PATH
export PATH=$HOME/tools:$PATH
export GOOGLE_APPLICATION_CREDENTIALS=~/.ssh/lce-dev-sandbox-firestore-auth/cloud-storage-key.json

# Custom kafka aliases
export COMMAND_KTOPICS='kafka-topics  --bootstrap-server pkc-l9zdv.us-central1.gcp.confluent.cloud:9092 --command-config ~/.ccloud/ccloud-cli-config.properties --list'
alias ktopics='echo $COMMAND_KTOPICS; eval $COMMAND_KTOPICS'

kconsume() {
    export COMMAND_KCONSUME="kafka-console-consumer --bootstrap-server pkc-l9zdv.us-central1.gcp.confluent.cloud:9092 --topic $1 --from-beginning --consumer.config ~/.ccloud/ccloud-cli-config.properties"
    echo $COMMAND_KCONSUME
    eval $COMMAND_KCONSUME
}
# End custom kafka aliases

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/wrigjame/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/wrigjame/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/wrigjame/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/wrigjame/google-cloud-sdk/completion.zsh.inc'; fi

mercstore() {
    gcloud beta compute ssh --zone "us-central1-b" "store-server-mercury" --project "lce-dev-devsandbox-eaa7"
}

ssh_vserver() {
    if [[ -z "$1" ]]; then
        printf "\nusage: ssh_vserver <team> \nssh_vserver supremes\n\n"
    else
        gcloud beta compute ssh --zone "us-central1-b" "store-server-$1" --project "lce-dev-devsandbox-eaa7"
    fi
}
ssh_vterminal() {
    if [[ -z "$1" ]]; then
        printf "\nusage: ssh_vterminal <type> <team> \nssh_vterminal cmdlcs vulcan\n\n"
    else
        gcloud beta compute ssh --zone "us-central1-b" "store-terminal-hp-$1-$2" --project "lce-dev-devsandbox-eaa7"
    fi
}
disable-parallel() {
    find . -name Dockerfile -exec sed -i '' -e "s/dotnet restore/dotnet restore --disable-parallel/g" {} \;
}
disable-tests() {
    find . -iname dockerfile -exec sed -i '' -e "s/RUN dotnet test//g" {} \;
}
disable-all() {
    disable-parallel
    disable-tests
}
enable-all() {
    find . -name Dockerfile -exec git discard {} \;
}
get-branch-name() {
    git symbolic-ref --short HEAD | sed -e 's/servicesOnly\///g'
}
get-kubectl-namespace() {
    branch=$(get-branch-name)
    kubectl get namespaces | grep ${branch:0:5} | awk '{print $1}'
}
get-pods() {
    ns=$(get-kubectl-namespace)
    kubectl -n $ns get pods
}
watch-pods() {
    ns=$(get-kubectl-namespace)
    watch kubectl -n $ns get pods
}
alias services-start='./scripts/docker.up --services --cloud-only-services --namespace store --dev-uis'
alias build-models='./scripts/build.lib; dotnet restore;'
